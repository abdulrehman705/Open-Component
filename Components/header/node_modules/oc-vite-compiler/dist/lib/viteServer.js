"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const util_1 = require("util");
const oc_vite_1 = __importDefault(require("oc-vite"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const builtin_modules_1 = __importDefault(require("builtin-modules"));
const oc_hash_builder_1 = __importDefault(require("oc-hash-builder"));
const serverWrapper_1 = __importDefault(require("./serverWrapper"));
const es_module_lexer_1 = require("es-module-lexer");
const nodeModuleMatcher = /^[a-z@][a-z\-/0-9.]+$/i;
const moduleWithPathMatcher = /^(?!@).*\//g;
async function compileServer(options) {
    const componentPath = options.componentPath;
    const serverFileName = options.componentPackage.oc.files.data;
    let serverPath = path_1.default.join(options.componentPath, serverFileName);
    if (process.platform === 'win32') {
        serverPath = serverPath.split('\\').join('\\\\');
    }
    const publishFileName = options.publishFileName || 'server.js';
    const publishPath = options.publishPath;
    const dependencies = options.componentPackage.dependencies || {};
    const componentName = options.componentPackage.name;
    const componentVersion = options.componentPackage.version;
    const production = !!options.production;
    const wrapperFn = options.serverWrapper || serverWrapper_1.default;
    await es_module_lexer_1.init;
    const [, entryExports] = await (0, es_module_lexer_1.parse)(await fs_extra_1.default.readFile(serverPath, 'utf-8'));
    const higherOrderServerContent = wrapperFn({
        exports: entryExports.map((x) => x.n),
        bundleHashKey: options.compiledViewInfo.bundle.hashKey,
        serverPath,
        componentName,
        componentVersion,
    });
    const tempFolder = path_1.default.join(publishPath, 'temp');
    const higherOrderServerPath = path_1.default.join(tempFolder, '__oc_higherOrderServer.ts');
    const externals = [...Object.keys(dependencies), ...builtin_modules_1.default];
    try {
        await fs_extra_1.default.outputFile(higherOrderServerPath, higherOrderServerContent);
        const plugins = options?.plugins ?? [];
        const pluginsNames = plugins.map((x) => x?.name).filter(Boolean);
        const baseConfig = await oc_vite_1.default
            // @ts-ignore
            .loadConfigFromFile(process.cwd())
            .catch(() => null);
        const basePlugins = baseConfig?.config?.plugins?.filter((p) => !pluginsNames.includes(p?.name)) ?? [];
        const result = await oc_vite_1.default.build({
            appType: 'custom',
            root: componentPath,
            mode: production ? 'production' : 'development',
            plugins: [
                {
                    name: 'clean-data-export',
                    enforce: 'pre',
                    load(id) {
                        if (id === serverPath) {
                            let code = require('fs').readFileSync(id, 'utf-8');
                            const exportCount = (code.match(/export/g) || []).length;
                            const serverExportPattern = /export\s+(const|function|async\s+function)\s+server\b/;
                            if (exportCount === 1 && serverExportPattern.test(code)) {
                                code = `${code}
                export const data = null;
              `;
                            }
                            return code;
                        }
                    },
                },
                ...plugins,
                ...basePlugins,
            ],
            logLevel: options.verbose ? 'info' : 'silent',
            build: {
                lib: { entry: higherOrderServerPath, formats: ['cjs'] },
                write: false,
                minify: production,
                rollupOptions: {
                    external: (id) => {
                        if (id === 'oc-server')
                            return false;
                        if (nodeModuleMatcher.test(id)) {
                            if (moduleWithPathMatcher.test(id)) {
                                id = id.split('/')[0];
                            }
                            if (!externals.includes(id)) {
                                throw new Error(`Missing dependencies from package.json => ${id}`);
                            }
                            return true;
                        }
                        return false;
                    },
                },
            },
        });
        const out = Array.isArray(result) ? result[0] : result;
        const bundle = out.output[0].code;
        await fs_extra_1.default.ensureDir(publishPath);
        await fs_extra_1.default.writeFile(path_1.default.join(publishPath, publishFileName), bundle);
        return {
            type: 'node.js',
            hashKey: oc_hash_builder_1.default.fromString(bundle),
            src: publishFileName,
        };
    }
    finally {
        await fs_extra_1.default.remove(tempFolder);
    }
}
exports.default = (0, util_1.callbackify)(compileServer);
