import { DataContext, DataProvider } from './types';
export type ServerContext<E = {
    name: string;
}, P = any> = Omit<DataContext<any, E, P>, 'params' | 'action' | 'setEmptyResponse'>;
export type Action<I, O, E> = (params: I, ctx: ServerContext<E>) => Promise<O> | O;
type AnyAction = Action<any, any, any>;
export declare class Server<E, A extends Record<string, AnyAction> = {}, InitialInput = any, InitialOutput = any> {
    readonly initial: Action<InitialInput, InitialOutput, E>;
    readonly actions: A;
    constructor(initial: Action<InitialInput, InitialOutput, E>);
    action<ActionName extends string, I, O>(name: ActionName, action: Action<I, O, E>): Server<E, A & Record<ActionName, Action<I, O, E>>, InitialInput, InitialOutput>;
    getData(): DataProvider<any, any, any>;
}
export interface Register {
}
export type AnyServer = Server<any, any>;
export type RegisteredServer = Register extends {
    server: infer TServer extends AnyServer;
} ? TServer : AnyServer;
type GetInitialData<TServer extends AnyServer> = TServer extends Server<any, any, any, infer O> ? Exclude<O, undefined | null> : any;
export type InitialData = GetInitialData<RegisteredServer>;
export type ComponentSettings = {
    id: string;
    staticPath: string;
    baseUrl: string;
    name: string;
    version: string;
};
export declare const getInitialData: () => InitialData;
export declare const getSettings: () => ComponentSettings;
export {};
