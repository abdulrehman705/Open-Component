import { AnyServer, RegisteredServer, Action } from './Server';
type InferInput<R> = R extends Action<infer I, any, any> ? I : any;
type InferOutput<R> = R extends Action<any, infer O, any> ? O : never;
type ServerClient<TServer extends AnyServer> = {
    readonly [Property in keyof TServer['actions']]: (input: InferInput<TServer['actions'][Property]>) => Promise<InferOutput<TServer['actions'][Property]>>;
};
export declare const serverClient: ServerClient<RegisteredServer>;
export type ActionOutput<K extends keyof typeof serverClient> = Awaited<ReturnType<(typeof serverClient)[K]>>;
export {};
