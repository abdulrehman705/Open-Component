"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const promises_1 = __importDefault(require("fs/promises"));
const path_1 = __importDefault(require("path"));
function getUnixUtcTimestamp() {
    const d1 = new Date(), d2 = new Date(d1.getUTCFullYear(), d1.getUTCMonth(), d1.getUTCDate(), d1.getUTCHours(), d1.getUTCMinutes(), d1.getUTCSeconds(), d1.getUTCMilliseconds());
    return Math.floor(d2.getTime());
}
const writeJson = (path, data) => promises_1.default.writeFile(path, JSON.stringify(data, null, 2), 'utf8');
exports.default = ({ compileServer, compileView, compileStatics, getInfo }) => async (options) => {
    const componentPackage = JSON.parse(JSON.stringify(options.componentPackage));
    const ocPackage = options.ocPackage;
    const compiledViewInfo = await compileView(options);
    // USE COMPILATION INFO TO MASSAGE COMPONENT'S PACKAGE
    componentPackage.oc.files.template = compiledViewInfo.template;
    delete componentPackage.oc.files.client;
    // Compile server
    if (componentPackage.oc.files.data) {
        const compiledServerInfo = await compileServer(Object.assign({}, options, { compiledViewInfo }));
        // USE COMPILATION INFO TO MASSAGE COMPONENT'S PACKAGE
        componentPackage.oc.files.dataProvider = compiledServerInfo;
        delete componentPackage.oc.files.data;
    }
    // Compile package.json
    componentPackage.oc.files.template.version = getInfo().version;
    componentPackage.oc.version = ocPackage.version;
    componentPackage.oc.packaged = true;
    componentPackage.oc.date = getUnixUtcTimestamp();
    if (!componentPackage.oc.files.static) {
        componentPackage.oc.files.static = [];
    }
    if (!Array.isArray(componentPackage.oc.files.static)) {
        componentPackage.oc.files.static = [componentPackage.oc.files.static];
    }
    await writeJson(path_1.default.join(options.publishPath, 'package.json'), componentPackage);
    await compileStatics(options);
    // Copy .env if available
    const env = componentPackage.oc.files.env;
    if (env) {
        const src = path_1.default.join(options.componentPath, env);
        const dest = path_1.default.join(options.publishPath, '.env');
        await promises_1.default.copyFile(src, dest);
    }
};
