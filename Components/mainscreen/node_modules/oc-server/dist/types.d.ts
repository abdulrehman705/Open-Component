export interface AcceptLanguage {
    code: string;
    script?: any;
    region: string;
    quality: number;
}
export interface Env {
    name: string;
}
export interface External {
    global: string;
    url: string;
    name: string;
}
export interface Template {
    type: string;
    version: string;
    externals: External[];
}
export interface DataContext<T = any, E = Env, P = any> {
    action?: string;
    acceptLanguage: AcceptLanguage[];
    baseUrl: string;
    env: E;
    params: T;
    plugins: P;
    requestHeaders: Record<string, string>;
    requestIp: string;
    setEmptyResponse: () => void;
    setHeader: (header: string, value: string) => void;
    staticPath: string;
    templates: Template[];
}
type Callback<D, E = Error> = (error: E | null, data?: D) => void;
export type DataProvider<Parameters = any, Return = any, Environment = Env> = (context: DataContext<Parameters, Environment>, callback: Callback<Return>) => void;
export {};
