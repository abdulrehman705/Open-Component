"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const oc_generic_template_compiler_1 = require("oc-generic-template-compiler");
const oc_statics_compiler_1 = __importDefault(require("oc-statics-compiler"));
const viteServer_1 = __importDefault(require("./viteServer"));
const viteView_1 = __importDefault(require("./viteView"));
function checkExternal(data) {
    return (typeof data === 'object' &&
        data !== null &&
        typeof data.name === 'string' &&
        typeof data.global === 'string' &&
        typeof data.url === 'string');
}
function checkExternals(data) {
    return Array.isArray(data) && data.every((item) => checkExternal(item));
}
function createCompile(params) {
    return (0, oc_generic_template_compiler_1.createCompile)({
        compileView(options, cb) {
            let externals;
            if (options.componentPackage.oc.files.template.externals) {
                const valid = checkExternals(options.componentPackage.oc.files.template.externals);
                if (valid) {
                    externals = options.componentPackage.oc.files.template.externals;
                }
                else {
                    throw new Error(`Invalid externals on ${options.componentPackage.name}. Expected an array of objects with name, global, and url properties.`);
                }
            }
            else {
                externals = params.getInfo().externals;
            }
            return (0, viteView_1.default)({
                ...options,
                plugins: params.plugins,
                htmlTemplate: params.htmlTemplate,
                viewWrapper: params.viewWrapper,
                externals,
            }, cb);
        },
        compileServer: viteServer_1.default,
        compileStatics: oc_statics_compiler_1.default,
        getInfo: params.getInfo,
    });
}
exports.default = createCompile;
